GIT EXERCISE USING THIS FILE

First Change in this file 
Architecture and Design
SOLID 
Creating a new branch
SOLID stands for:
Descriptions of each one
•	S - Single-responsiblity Principle
•	O - Open-closed Principle
•	L - Liskov Substitution Principle
•	I - Interface Segregation Principle
•	D - Dependency Inversion Principle
	Single-Responsibility Principle
A class should have one and only one reason to change, meaning that a class should have only one job. Implementation of multiple functionalities in a single class mashup the code and if any modification is required may affect the whole class.
	Open-Closed Principle
Objects or entities should be open for extension but closed for modification. This means that a class should be extendable without modifying the class itself. The module should be open for extension but closed for modification. Classes, methods or functions must be open for extension (add new functionality) and closed for possible modification, to avoid unwanted changes in already tested code.
	Liskov Substitution Principle
This means that every subclass or derived class should be substitutable for their base or parent class, if class A is a subtype of class B, then we should be able to replace B with A without interrupting the behavior of the program. 
	Interface Segregation Principle
A client should never be forced to implement an interface that it doesn’t use, or clients shouldn’t be forced to depend on methods they do not use. The goal of the interface segregation principle is similar to the single responsibility principle.
	Dependency Inversion Principle
Entities must depend on abstractions, not on concretions. It states that the high-level module must not depend on the low-level module, but they should depend on abstractions. This principle allows for decoupling. 
Second topic
 Object Oriented and SOLID Design Principles for Programmers 
1.	DRY (Don’t repeat yourself)
Don’t write duplicate code or if you use a hard-coded value more than one time make them public final constant, instead use Abstraction to abstract common things in one place.
2.	Encapsulate What Changes
Encapsulate the code that can be changed in the future, the benefit of this object-oriented programming design principle is that proper encapsulated code is easy to test and maintain.
3.	Favor Composition over Inheritance
Inheritance and Composition both have their own advantages and disadvantages, but in general you should always favor composition over inheritance, if possible, composition allows you to change the behavior of a class at runtime by setting the property over time execution, and uses the polymorphism
4.	Programming for Interface not implementation
Flexible code can work with any new interface implementation, you must use interface type in variables.
5.	 Delegation principles 
Do not do all the things on your own, delegate to the respective class, compare two objects, the class itself is asked to make a comparison instead of the client class doing that verification directly, this helps not to duplicate code.










Design Patterns
MVC Design Pattern 
The MVC is a software architecture pattern that, using 3 components (Views, Models and Controllers) separates the logic of the application from the logic of the view in an application. It is an important architecture since it is used both in basic graphics components to business systems, it mainly relates to the user interface / interaction layer of an application, you will need a business logic layer, maybe a service layer and a data access layer.
•	The model contains only the raw data of the application.
•	The View presents the model’s data to the user.
•	The Controller exists between the view and the model.

Abstract Factory Pattern 
It is also called a factory. This type of design pattern is included in the creation pattern, as this pattern provides one of the best ways to create an object. In this pattern, an interface is responsible for creating a factory of related objects without explicitly specifying their classes. Each one generated can give the objects according to the factory pattern.

Singleton Pattern 
Included in the creation pattern, as this pattern provides one of the best ways to create an object. It involves a single class that is responsible for creating an object while ensuring that only one object is created. This class provides a way to access your only object that can be accessed directly

Builder Pattern
Build a complex object using simple objects and using a step-by-step approach. It is included in the build pattern, as this pattern provides one of the best ways to create an object, a Builder class builds the final object step by step. This constructor is independent of other objects.

Prototype Pattern
Refers to creating a duplicate object with performance in mind. It is included in the creation pattern, as this pattern provides one of the best ways to create an object, it involves implementing a prototype interface that tells you to create a clone of the current object, it is used when creating an object directly it is expensive.

Adapter Pattern
It is like a bridge between two incompatible interfaces, it comes under a structural pattern since this pattern combines the capacity of two independent interfaces. It involves a single class that is responsible for uniting functionalities of independent or incompatible interfaces


Proxy Pattern
In this pattern, a class represents the functionality of another class, it comes under a structural pattern, and we create an object that has an original object to interconnect its functionality with the outside world.

Layered Architecture
The most common architecture pattern is the layered architecture pattern, the layered architecture pattern closely matches the traditional IT communication and organizational structures found in most companies, making it a natural choice for most business application development efforts.
The components within the layered architecture pattern are arranged in horizontal layers, each layer plays a specific role within the application, although the layered architecture pattern does not specify the number and types of layers that must exist in the pattern, the most layered architectures consist of four standard layers: Presentation, Business, Persistence, and Database.
In some cases, the business layer and the persistence layer are combined into a single business layer, particularly when persistence logic, each layer of the layered architecture pattern has a specific role and responsibility within the application.
